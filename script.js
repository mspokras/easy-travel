
//–í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã
const btnOkCountry = document.querySelector(".ok-country-btn");
const btnReadyFlights = document.querySelector(".ok-dates-btn");
const countryOrigin = document.getElementById("country-origin");
const countryDestination = document.getElementById("country-destination");
//–ü–µ—Ä–≤—ã–π —Ä–∞–∑–¥–µ–ª (section)
const flagsPlane = document.querySelector(".flags-and-plane");
const placeholderAfterSelectors = document.querySelector(
  ".placeholder-after-selectors"
);
//–í—Ç–æ—Ä–æ–π —Ä–∞–∑–¥–µ–ª
const mapAlert = document.querySelector(".map-alert");
const mapContainer = document.getElementById("mapid");
//–¢—Ä–µ—Ç–∏–π —Ä–∞–∑–¥–µ–ª
const flightsPrices = document.querySelector(".flights-container");
const ticketsOutput = document.querySelector(".tickets-output");

//–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–æ–ª–ª
document.querySelector(".ul-nav").addEventListener("click", function (e) {
  e.preventDefault();

  if (e.target.classList.contains("a-nav")) {
    const id = e.target.getAttribute("href");
    document.querySelector(id).scrollIntoView({ behavior: "smooth" });
  }
});

let map;
btnOkCountry.addEventListener("click", function (e) {
  e.preventDefault();

  //–û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–∞—Ä—Ç—É –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
  ticketsOutput.innerHTML = "";
  flagsPlane.innerHTML = "";
  placeholderAfterSelectors.innerHTML = "";
  mapAlert.innerHTML = "";
  if (map) map.remove();
  ticketsOutput.classList.add("hidden");

  //–í–æ–∑–º–æ–∂–Ω—ã–µ –æ–ø–µ—á–∞—Ç–∫–∏/–æ—à–∏–±–∫–∏: –ø–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è —Å—Ç—Ä–∞–Ω–∞ –∏–ª–∏ falsy value
  const htmlSameCountry = `<h2>–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã, –∞ –º—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—Ä—É–±–µ–∂–Ω—ã—Ö –ø–æ–µ–∑–¥–∫–∞—Ö üôÅüõ´ </h2>`;
  if (countryOrigin.value === "0" || countryDestination.value === "0") return;
  if (countryDestination.value === countryOrigin.value) {
    placeholderAfterSelectors.insertAdjacentHTML("afterbegin", htmlSameCountry);
    return;
  }


  //–í—Å—Ç–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ñ–ª–∞–≥–∞–º–∏ –∏ —Å–∞–º–æ–ª—ë—Ç–æ–º
  const htmlFlagsPlane = `<h2>–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ù–∏–∂–µ –≤—ã –Ω–∞–π–¥—ë—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–µ –ø—Ä–∏–±—ã—Ç–∏—è üòÄ</h2>
  <div class="flags" style="position:relative">
  <img src="https://countryflagsapi.com/svg/${countryOrigin.value.toLowerCase()}" style="position:absolute; top:0px; height:40px; width:60px" />
  <img src="images/planefinal.png" style="height:300px;margin-left:60px;" />
  <img src="https://countryflagsapi.com/svg/${countryDestination.value.toLowerCase()}" style="margin-top:20px; height:40px; width:60px" />
  <style>
  #general-section {
    padding: 15px 30px;
    border: #97b6be 1px solid;  
  }
  .chooseCountries {
    padding-bottom: 15px;
  }
  #mapid {
    height: 640px;
    margin-bottom: 25px;
  }
  </style>
  </div>`;
  flagsPlane.insertAdjacentHTML("afterbegin", htmlFlagsPlane);

  //–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–æ–ª–ª
  document
    .querySelector(".flags-and-plane")
    .scrollIntoView({ behavior: "smooth" });

  //–ù–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞ –æ–±–µ–∏—Ö —Å—Ç—Ä–∞–Ω
  let coordsArray = [];
  let timezone1;
  let timezone2;
  let distanceBetweenCoords;
  (async function () {
    try {
      let res = await fetch(
        `https://restcountries.com/v3.1/alpha/${countryOrigin.value.toLowerCase()}`
      );
      if (!res.ok) throw new Error(`Country not found (${res.status})`);
      let resp = await res.json();
      const latlng1 = await resp[0].latlng;
      coordsArray.push(latlng1);
      let timezone = await resp[0].timezones;
      if (timezone[4] !== "0") {
        timezone1 = timezone[0].slice(4, 6);
      } else {
        timezone1 = timezone[0].slice(5, 6);
      }
      if (timezone[3] === "-") timezone1 = "-" + timezone1;
      if (countryOrigin.value === "DK") timezone1 = 1;

      res = await fetch(
        `https://restcountries.com/v3.1/alpha/${countryDestination.value.toLowerCase()}`
      );
      if (!res.ok) throw new Error(`Country not found (${res.status})`);
      resp = await res.json();
      const latlng2 = await resp[0].latlng;
      coordsArray.push(latlng2);
      timezone = await resp[0].timezones;
      if (timezone[4] !== "0") {
        timezone2 = timezone[0].slice(4, 6);
      } else {
        timezone2 = timezone[0].slice(5, 6);
      }
      if (timezone[3] === "-") timezone2 = "-" + timezone2;
      if (countryDestination.value === "DK") timezone2 = 1;
    } catch (err) {
      console.error(err.message);
    }

    //–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø–∞—Ä–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    function getDistanceFromLatLonInKm([[lat1, lon1], [lat2, lon2]]) {
      var R = 6371; // Radius of the earth in km
      var dLat = deg2rad(lat2 - lat1); // deg2rad below
      var dLon = deg2rad(lon2 - lon1);
      var a =
        Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos(deg2rad(lat1)) *
          Math.cos(deg2rad(lat2)) *
          Math.sin(dLon / 2) *
          Math.sin(dLon / 2);
      var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      var d = R * c; // Distance in km
      return d;
    }

    function deg2rad(deg) {
      return deg * (Math.PI / 180);
    }

    distanceBetweenCoords = getDistanceFromLatLonInKm(coordsArray);
    const flightTime = distanceBetweenCoords / 840 + 0.5;

    function timeConvert(num) {
      var hours = Math.floor(num);
      var minutes = Math.floor((num * 60) % 60);
      return hours + " —á. " + minutes + " –º–∏–Ω.";
    }

    const hrsMinsTime = timeConvert(flightTime);
    //‚úàÔ∏è
    const htmlFlightTime = `<h3>üïí –í —Å—Ä–µ–¥–Ω–µ–º, –ø—Ä—è–º–æ–π –ø–µ—Ä–µ–ª—ë—Ç –º–µ–∂–¥—É –¥–≤—É–º—è —Å—Ç—Ä–∞–Ω–∞–º–∏ –∑–∞–π–º—ë—Ç –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ <span class="blue-coloured">${hrsMinsTime}</span></h3>`;
    placeholderAfterSelectors.insertAdjacentHTML("beforeend", htmlFlightTime);

  //–ù–∞–∑–≤–∞—Ç—å –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –≤–∞–ª—é—Ç—É —Å—Ç—Ä–∞–Ω—ã, –ø–ª–æ—â–∞–¥—å, –Ω–∞—Å–µ–ª–µ–Ω–∏–µ –∏ –≥—Ä–∞–Ω–∏—á–∞—â–∏–µ —Å—Ç—Ä–∞–Ω—ã.
  let currencyDestination;
  let areaDestination;
  let populationDestination;
  let capital;
  (async function () {
    try {
      let res = await fetch(
        `https://restcountries.com/v2/alpha/${countryDestination.value.toLowerCase()}`
      );
      if (!res.ok) throw new Error(`Country not found (${res.status})`);
      let resp = await res.json();
      currencyDestination = await resp.currencies[0].name;
      areaDestination = await resp.area;
      populationDestination = await resp.population;
      capital = await resp.capital;
    } catch (err) {
      console.error(err.message);
    }

    //–ù–∞–∑–≤–∞—Ç—å —Å—Ç–æ–ª–∏—Ü—É —Å—Ç—Ä–∞–Ω—ã
    const htmlCapital = `<h3>üåÜ –°—Ç–æ–ª–∏—Ü–∞ —Å—Ç—Ä–∞–Ω—ã –ø—Ä–∏–±—ã—Ç–∏—è - <span class="blue-coloured">${capital}</span>.</h3>`;
    placeholderAfterSelectors.insertAdjacentHTML("beforeend", htmlCapital);
    //–ù–∞–∑–≤–∞—Ç—å –ø–ª–æ—â–∞–¥—å –∏ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø—Ä–∏–µ–∑–¥–∞
    const htmlAreaPopulation = `<h3>üóæ –ü–ª–æ—â–∞–¥—å - <span class="blue-coloured">${areaDestination} –∫–º¬≤</span>.</h3>
    <h3>üë´ –ù–∞—Å–µ–ª–µ–Ω–∏–µ - <span class="blue-coloured">${populationDestination} —á–µ–ª</span>.</h3>`;
    placeholderAfterSelectors.insertAdjacentHTML(
      "beforeend",
      htmlAreaPopulation
    );
    //–ù–∞–∑–≤–∞—Ç—å –≤–∞–ª—é—Ç—É
    const htmlCurrency = `<h3>üíµ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞ - <span class="blue-coloured">${currencyDestination}</span>.</h3>`;
    placeholderAfterSelectors.insertAdjacentHTML("beforeend", htmlCurrency);
  })();

  //////–ö–ê–†–¢–ê////////////////////////////
  //–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–∞—Ä—Ç—É
    map = L.map("mapid").setView(coordsArray[0], 13);

    /*L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(map);*/

    L.tileLayer(
      "https://{s}.tile.jawg.io/jawg-streets/{z}/{x}/{y}{r}.png?access-token=vk1VcDoODxY0kxhnqvxZPKTJ5aXHlaCbClioG0SteaiyLxYdF4cBia0f14BKwNJW",
      {
        attribution:
          '<a href="http://jawg.io" title="Tiles Courtesy of Jawg Maps" target="_blank">&copy; <b>Jawg</b>Maps</a> &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
        minZoom: 0,
        maxZoom: 22,
        subdomains: "abcd",
        accessToken:
          "vk1VcDoODxY0kxhnqvxZPKTJ5aXHlaCbClioG0SteaiyLxYdF4cBia0f14BKwNJW",
      }
    ).addTo(map);

    //–°–æ–∑–¥–∞—Ç—å –º–∞—Ä–∫–µ—Ä—ã (–æ—Ç–º–µ—Ç–∫–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–µ –∫–∞–ø–ª–∏)
    L.marker(coordsArray[0])
      .addTo(map)
      .bindPopup(
        L.popup({
          closeOnClick: false,
          autoClose: false,
        }).setContent("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
      )
      .openPopup();
    L.marker(coordsArray[1])
      .addTo(map)
      .bindPopup(
        L.popup({
          closeOnClick: false,
          autoClose: false,
        }).setContent("–ü—Ä–∏–±—ã—Ç–∏–µ")
      )
      .openPopup();

    //–°–æ–∑–¥–∞—Ç—å –ª–∏–Ω–∏—é, —Å–æ–µ–¥–∏–Ω—è—é—â—É—é –º–∞—Ä—à—Ä—É—Ç
    var polyline = L.polyline(coordsArray, { color: "red" }).addTo(map);
    map.fitBounds(polyline.getBounds());

    //–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–Ω–∏—Ü—É —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
    let differenceTimeZones;
    differenceTimeZones = timezone1 - timezone2;
    let htmlTimeZones;
    let htmlTimeZonesUkraine = "";
    if (differenceTimeZones === 0) {
      htmlTimeZones = `<h3>üåê –ü–æ –ø—Ä–∏–ª—ë—Ç—É –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω—É <span class="blue-coloured">–Ω–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è</span>.</h3>`;
    } else if (differenceTimeZones > 0) {
      htmlTimeZones = `<h3>üåê –ü–æ –ø—Ä–∏–ª—ë—Ç—É –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω—É –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –Ω–∞ <span class="blue-coloured">${differenceTimeZones} —á. –Ω–∞–∑–∞–¥</span>.</h3>`;
    } else if (differenceTimeZones < 0) {
      const realDifference = String(differenceTimeZones).slice(1);
      htmlTimeZones = `<h3>üåê –ü–æ –ø—Ä–∏–ª—ë—Ç—É –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω—É –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –Ω–∞ <span class="blue-coloured">${realDifference} —á. –≤–ø–µ—Ä—ë–¥</span>.</h3>`;
    }
    if (countryDestination.value === "UA" || countryOrigin.value === "UA") {
      htmlTimeZonesUkraine =
        '<h3 style="padding-left: 7px">‚ùó –ò–º–µ–π—Ç–µ –≤ –≤–∏–¥—É, —á—Ç–æ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ —Ä–∞–∑–Ω–∏—Ü—ã –≤–æ –≤—Ä–µ–º–µ–Ω–∏ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è <span class="red-coloured">—É–∫—Ä–∞–∏–Ω—Å–∫–æ–µ –∑–∏–º–Ω–µ–µ –≤—Ä–µ–º—è.</span> –õ–µ—Ç–Ω–µ–µ –≤—Ä–µ–º—è - –Ω–∞ —á–∞—Å –≤–ø–µ—Ä—ë–¥ –æ—Ç –∑–∏–º–Ω–µ–≥–æ.</h3>';
    }
    placeholderAfterSelectors.insertAdjacentHTML("beforeend", htmlTimeZones);
    placeholderAfterSelectors.insertAdjacentHTML(
      "beforeend",
      htmlTimeZonesUkraine
    );

    //–û–±—ä—è—Å–Ω–∏—Ç—å, —á—Ç–æ —Å–µ–π—á–∞—Å –±—É–¥–µ—Ç –∫–∞—Ä—Ç–∞
    const htmlThisIsMap = `<h4>üó∫Ô∏è –ù–∏–∂–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–∞—Ä—à—Ä—É—Ç–æ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ –º–∏—Ä–∞. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∞–º–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ ${Math.round(
      distanceBetweenCoords
    )} –∫–º.</h4>
    <style> 
      .map-alert {
        margin-top: 15px;
      }
    </style>`;
    mapAlert.insertAdjacentHTML("beforeend", htmlThisIsMap);
  })();

  //////–ê–í–ò–ê–ë–ò–õ–ï–¢–´////////////////////////////////

  //–°–æ–∑–¥–∞—Ç—å input
  flightsPrices.classList.remove("hidden");
  // const htmlInputFields = ``;
  // flightsPrices.insertAdjacentHTML("beforeend", htmlInputFields);

  //–ü–æ–º–µ—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ input –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  btnReadyFlights.addEventListener("click", function (e) {
    e.preventDefault();

    const inputDepartureDate = document.getElementById("departure-date");
    const inputReturnDate = document.getElementById("return-date");
    const inputCurrency = document.getElementById("currency-tickets");
    ticketsOutput.innerHTML = "";
    //–ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É –∑–∞ –Ω–µ–ø—Ä—è–º—ã–µ –∏ –ø—Ä—è–º—ã–µ —Ä–µ–π—Å—ã
    //1-2 - –ü–†–Ø–ú–´–ï, 3-4 - –ù–ï–ü–†–Ø–ú–´–ï –†–ï–ô–°–´
    let priceFlights = ["237", "291", "128", "147"];
    let cityOrigins = ["City1", "City2", "City3", "City4"];
    let cityDestinations = ["City5", "City6", "City7", "City8"];
    let carriersFrom = ["Wizz Air", "Ryanair", "Ryanair", "Lufthansa"];
    let carriersTo = ["Ryanair", "Wizz Air", "Wizz Air", "Ryanair"];
    
    ticketsOutput.classList.remove("hidden");
    const htmlTickets = `<h3 class="congrats">üòÄ –ú—ã –Ω–∞—à–ª–∏ –¥–ª—è –≤–∞—Å —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–ª—ë—Ç–æ–≤:</h3>
    <table>
      <tr>
        <th style="width=170px">–ü—Ä—è–º–æ–π –ø–µ—Ä–µ–ª—ë—Ç/—Å –ø–µ—Ä–µ—Å–∞–¥–∫–æ–π</th>
        <th style="width=170px">–¶–µ–Ω–∞ –≤ ${
          inputCurrency.value
        } –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã</th>
        <th>–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</th>
        <th>–ì–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è</th>
        <th style="width=170px">–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è (–ø–µ—Ä–µ–ª—ë—Ç "—Ç—É–¥–∞")</th>
        <th style="width=170px">–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è (–ø–µ—Ä–µ–ª—ë—Ç "–æ–±—Ä–∞—Ç–Ω–æ")</th>
      </tr>
      <tr>
        <td style="text-align: center;" rowspan="2"><img src="images/directflight.jpg" alt="–ü—Ä—è–º–æ–π" width="150px" /></td>
        <td><b>${
          priceFlights[0] ? priceFlights[0] : "–ù–µ—Ç –ø—Ä—è–º—ã—Ö —Ä–µ–π—Å–æ–≤"
        }</b></td>
        <td>${priceFlights[0] ? cityOrigins[0] : "-"}</td>
        <td>${priceFlights[0] ? cityDestinations[0] : "-"}</td>
        <td>${priceFlights[0] ? carriersFrom[0] : "-"}</td>
        <td>${priceFlights[0] ? carriersTo[0] : "-"}</td>
      </tr>
      <tr>
        <td><b>${priceFlights[1] ? priceFlights[1] : "-"}</b></td>
        <td>${priceFlights[1] ? cityOrigins[1] : "-"}</td>
        <td>${priceFlights[1] ? cityDestinations[1] : "-"}</td>
        <td>${priceFlights[1] ? carriersFrom[1] : "-"}</td>
        <td>${priceFlights[1] ? carriersTo[1] : "-"}</td>
      </tr>
      <tr>
        <td rowspan="2" style="text-align: center;"><img src="images/connectingflight.jpg" alt="–° –ø–µ—Ä–µ—Å–∞–¥–∫–æ–π" width="150px" /></td>
        <td><b>${
          priceFlights[2] ? priceFlights[2] : "–ù–µ—Ç —Ä–µ–π—Å–æ–≤ —Å –ø–µ—Ä–µ—Å–∞–¥–∫–æ–π"
        }</b></td>
        <td>${priceFlights[2] ? cityOrigins[2] : "-"}</td>
        <td>${priceFlights[2] ? cityDestinations[2] : "-"}</td>
        <td>${priceFlights[2] ? carriersFrom[2] : "-"}</td>
        <td>${priceFlights[2] ? carriersTo[2] : "-"}</td>
      </tr>
      <tr>
        <td><b>${priceFlights[3] ? priceFlights[3] : "-"}</b></td>
        <td>${priceFlights[3] ? cityOrigins[3] : "-"}</td>
        <td>${priceFlights[3] ? cityDestinations[3] : "-"}</td>
        <td>${priceFlights[3] ? carriersFrom[3] : "-"}</td>
        <td>${priceFlights[3] ? carriersTo[3] : "-"}</td>
      </tr>
      </table>
      <div class="warning"><h5>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, Skyscanner API –±—ã–ª –æ—Ç–∫–ª—é—á—ë–Ω –≤ –∫–æ–Ω—Ü–µ 2021 –≥–æ–¥–∞, –ø–æ—ç—Ç–æ–º—É –Ω–∞—Å—Ç–æ—è—â–∏–µ —Ü–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–µ–±-—Å–∞–π—Ç–æ–º skyscanner.com.ua/</h5></div>`;
    ticketsOutput.insertAdjacentHTML("beforeend", htmlTickets);
    flightsPrices.scrollIntoView({ behavior: "smooth" });

    /*fetch(
      `https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/browseroutes/v1.0/UA/${inputCurrency.value}/en-GB/${countryOrigin.value}/${countryDestination.value}/${inputDepartureDate.value}/${inputReturnDate.value}`,
      {
        method: "GET",
        headers: {
          "x-rapidapi-key":
            "49af5718bfmshbe2e8d52f4de10ep157160jsn44623415c926",
          "x-rapidapi-host":
            "skyscanner-skyscanner-flight-search-v1.p.rapidapi.com",
        },
      }
    )
      .then((response) => {
        return response.json();
      })
      .then((data) => {
        console.log(data);
        if (data["Quotes"]["length"] === 0) {
          const htmlNoTickets =
            "<h3>üò• –ë–∏–ª–µ—Ç–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—ã!</h3>";
          ticketsOutput.insertAdjacentHTML("afterbegin", htmlNoTickets);
          flightsPrices.scrollIntoView({ behavior: "smooth" });
        } else {
          for (let i = 0; i < data["Quotes"].length; i++) {
            if (data["Quotes"][i]["Direct"] === true && !priceFlights[0]) {
              priceFlights[0] = data["Quotes"][i]["MinPrice"];
              cityOrigins[0] = data["Quotes"][i]["OutboundLeg"]["OriginId"];
              cityDestinations[0] =
                data["Quotes"][i]["OutboundLeg"]["DestinationId"];
              carriersFrom[0] =
                data["Quotes"][i]["OutboundLeg"]["CarrierIds"][0];
              carriersTo[0] = data["Quotes"][i]["InboundLeg"]["CarrierIds"][0];
              //Turning codes into real data
              const objectCityOrigin = data["Places"].find(
                (element) => element["PlaceId"] === cityOrigins[0]
              );
              cityOrigins[0] = objectCityOrigin["CityName"];
              const objectCityDestination = data["Places"].find(
                (element) => element["PlaceId"] === cityDestinations[0]
              );
              cityDestinations[0] = objectCityDestination["CityName"];
              const objectCarrier = data["Carriers"].find(
                (element) => element["CarrierId"] === carriersFrom[0]
              );
              carriersFrom[0] = objectCarrier["Name"];
              const objectCarrier2 = data["Carriers"].find(
                (element) => element["CarrierId"] === carriersTo[0]
              );
              carriersTo[0] = objectCarrier2["Name"];
            } else if (
              data["Quotes"][i]["Direct"] === true &&
              priceFlights[0] &&
              !priceFlights[1]
            ) {
              priceFlights[1] = data["Quotes"][i]["MinPrice"];
              cityOrigins[1] = data["Quotes"][i]["OutboundLeg"]["OriginId"];
              cityDestinations[1] =
                data["Quotes"][i]["OutboundLeg"]["DestinationId"];
              carriersFrom[1] =
                data["Quotes"][i]["OutboundLeg"]["CarrierIds"][0];
              carriersTo[1] = data["Quotes"][i]["InboundLeg"]["CarrierIds"][0];
              //Turning codes into real data
              const objectCityOrigin = data["Places"].find(
                (element) => element["PlaceId"] === cityOrigins[1]
              );
              cityOrigins[1] = objectCityOrigin["CityName"];
              const objectCityDestination = data["Places"].find(
                (element) => element["PlaceId"] === cityDestinations[1]
              );
              cityDestinations[1] = objectCityDestination["CityName"];
              const objectCarrier = data["Carriers"].find(
                (element) => element["CarrierId"] === carriersFrom[1]
              );
              carriersFrom[1] = objectCarrier["Name"];
              const objectCarrier2 = data["Carriers"].find(
                (element) => element["CarrierId"] === carriersTo[1]
              );
              carriersTo[1] = objectCarrier2["Name"];
            } else if (
              data["Quotes"][i]["Direct"] === false &&
              !priceFlights[2]
            ) {
              priceFlights[2] = data["Quotes"][i]["MinPrice"];
              cityOrigins[2] = data["Quotes"][i]["OutboundLeg"]["OriginId"];
              cityDestinations[2] =
                data["Quotes"][i]["OutboundLeg"]["DestinationId"];
              carriersFrom[2] =
                data["Quotes"][i]["OutboundLeg"]["CarrierIds"][0];
              carriersTo[2] = data["Quotes"][i]["InboundLeg"]["CarrierIds"][0];
              //Turning codes into real data
              const objectCityOrigin = data["Places"].find(
                (element) => element["PlaceId"] === cityOrigins[2]
              );
              cityOrigins[2] = objectCityOrigin["CityName"];
              const objectCityDestination = data["Places"].find(
                (element) => element["PlaceId"] === cityDestinations[2]
              );
              cityDestinations[2] = objectCityDestination["CityName"];
              const objectCarrier = data["Carriers"].find(
                (element) => element["CarrierId"] === carriersFrom[2]
              );
              carriersFrom[2] = objectCarrier["Name"];
              const objectCarrier2 = data["Carriers"].find(
                (element) => element["CarrierId"] === carriersTo[2]
              );
              carriersTo[2] = objectCarrier2["Name"];
            } else if (
              data["Quotes"][i]["Direct"] === false &&
              priceFlights[2] &&
              !priceFlights[3]
            ) {
              priceFlights[3] = data["Quotes"][i]["MinPrice"];
              cityOrigins[3] = data["Quotes"][i]["OutboundLeg"]["OriginId"];
              cityDestinations[3] =
                data["Quotes"][i]["OutboundLeg"]["DestinationId"];
              carriersFrom[3] =
                data["Quotes"][i]["OutboundLeg"]["CarrierIds"][0];
              carriersTo[3] = data["Quotes"][i]["InboundLeg"]["CarrierIds"][0];
              //Turning codes into real data
              const objectCityOrigin = data["Places"].find(
                (element) => element["PlaceId"] === cityOrigins[3]
              );
              cityOrigins[3] = objectCityOrigin["CityName"];
              const objectCityDestination = data["Places"].find(
                (element) => element["PlaceId"] === cityDestinations[3]
              );
              cityDestinations[3] = objectCityDestination["CityName"];
              const objectCarrier = data["Carriers"].find(
                (element) => element["CarrierId"] === carriersFrom[3]
              );
              carriersFrom[3] = objectCarrier["Name"];
              const objectCarrier2 = data["Carriers"].find(
                (element) => element["CarrierId"] === carriersTo[3]
              );
              carriersTo[3] = objectCarrier2["Name"];
            }
          }
          console.log(
            priceFlights,
            cityDestinations,
            cityOrigins,
            carriersFrom,
            carriersTo
          );
          const htmlTickets = `<style>
          .tickets-output {
            border-top: #97b6be 1px solid;
            background-color: #eaffff;
            padding: 25px 50px;
          }
          </style>
          <h3 class="congrats">üòÄ –ú—ã –Ω–∞—à–ª–∏ –¥–ª—è –≤–∞—Å —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–ª—ë—Ç–æ–≤:</h3>
          <table>
            <tr>
              <th style="width=170px">–ü—Ä—è–º–æ–π –ø–µ—Ä–µ–ª—ë—Ç/—Å –ø–µ—Ä–µ—Å–∞–¥–∫–æ–π</th>
              <th style="width=170px">–¶–µ–Ω–∞ –≤ ${
                inputCurrency.value
              } –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã</th>
              <th>–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</th>
              <th>–ì–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è</th>
              <th style="width=170px">–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è (–ø–µ—Ä–µ–ª—ë—Ç "—Ç—É–¥–∞")</th>
              <th style="width=170px">–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è (–ø–µ—Ä–µ–ª—ë—Ç "–æ–±—Ä–∞—Ç–Ω–æ")</th>
            </tr>
            <tr>
              <td style="text-align: center;" rowspan="2"><img src="images/directflight.jpg" alt="–ü—Ä—è–º–æ–π" width="150px" /></td>
              <td><b>${
                priceFlights[0] ? priceFlights[0] : "–ù–µ—Ç –ø—Ä—è–º—ã—Ö —Ä–µ–π—Å–æ–≤"
              }</b></td>
              <td>${priceFlights[0] ? cityOrigins[0] : "-"}</td>
              <td>${priceFlights[0] ? cityDestinations[0] : "-"}</td>
              <td>${priceFlights[0] ? carriersFrom[0] : "-"}</td>
              <td>${priceFlights[0] ? carriersTo[0] : "-"}</td>
            </tr>
            <tr>
              <td><b>${priceFlights[1] ? priceFlights[1] : "-"}</b></td>
              <td>${priceFlights[1] ? cityOrigins[1] : "-"}</td>
              <td>${priceFlights[1] ? cityDestinations[1] : "-"}</td>
              <td>${priceFlights[1] ? carriersFrom[1] : "-"}</td>
              <td>${priceFlights[1] ? carriersTo[1] : "-"}</td>
            </tr>
            <tr>
              <td rowspan="2" style="text-align: center;"><img src="images/connectingflight.jpg" alt="–° –ø–µ—Ä–µ—Å–∞–¥–∫–æ–π" width="150px" /></td>
              <td><b>${
                priceFlights[2] ? priceFlights[2] : "–ù–µ—Ç —Ä–µ–π—Å–æ–≤ —Å –ø–µ—Ä–µ—Å–∞–¥–∫–æ–π"
              }</b></td>
              <td>${priceFlights[2] ? cityOrigins[2] : "-"}</td>
              <td>${priceFlights[2] ? cityDestinations[2] : "-"}</td>
              <td>${priceFlights[2] ? carriersFrom[2] : "-"}</td>
              <td>${priceFlights[2] ? carriersTo[2] : "-"}</td>
            </tr>
            <tr>
              <td><b>${priceFlights[3] ? priceFlights[3] : "-"}</b></td>
              <td>${priceFlights[3] ? cityOrigins[3] : "-"}</td>
              <td>${priceFlights[3] ? cityDestinations[3] : "-"}</td>
              <td>${priceFlights[3] ? carriersFrom[3] : "-"}</td>
              <td>${priceFlights[3] ? carriersTo[3] : "-"}</td>
            </tr>
            </table>
            <div class="warning"><h5>–ü–æ–∏—Å–∫ –±–∏–ª–µ—Ç–æ–≤ –ø–æ–∫–∞ —á—Ç–æ –≤—ã–ø—É—â–µ–Ω –≤ –±–µ—Ç–∞-–≤–µ—Ä—Å–∏–∏, –ø–æ—ç—Ç–æ–º—É –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–æ–≥—É—Ç –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è. –î–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–µ–±-—Å–∞–π—Ç–æ–º aviasales.ua.</h5></div>`;
          ticketsOutput.insertAdjacentHTML("beforeend", htmlTickets);
          flightsPrices.scrollIntoView({ behavior: "smooth" });
        }
      })
      .catch((err) => {
        console.error(err);
      });*/
      
  });

});
